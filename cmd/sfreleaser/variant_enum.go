// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package main

import (
	"fmt"
	"strings"
)

const (
	// VariantUnset is a Variant of type Unset.
	VariantUnset Variant = iota
	// VariantApplication is a Variant of type Application.
	VariantApplication
	// VariantLibrary is a Variant of type Library.
	VariantLibrary
	// VariantSubstreams is a Variant of type Substreams.
	VariantSubstreams
)

var ErrInvalidVariant = fmt.Errorf("not a valid Variant, try [%s]", strings.Join(_VariantNames, ", "))

const _VariantName = "UnsetApplicationLibrarySubstreams"

var _VariantNames = []string{
	_VariantName[0:5],
	_VariantName[5:16],
	_VariantName[16:23],
	_VariantName[23:33],
}

// VariantNames returns a list of possible string values of Variant.
func VariantNames() []string {
	tmp := make([]string, len(_VariantNames))
	copy(tmp, _VariantNames)
	return tmp
}

var _VariantMap = map[Variant]string{
	VariantUnset:       _VariantName[0:5],
	VariantApplication: _VariantName[5:16],
	VariantLibrary:     _VariantName[16:23],
	VariantSubstreams:  _VariantName[23:33],
}

// String implements the Stringer interface.
func (x Variant) String() string {
	if str, ok := _VariantMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Variant(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Variant) IsValid() bool {
	_, ok := _VariantMap[x]
	return ok
}

var _VariantValue = map[string]Variant{
	_VariantName[0:5]:                    VariantUnset,
	strings.ToLower(_VariantName[0:5]):   VariantUnset,
	_VariantName[5:16]:                   VariantApplication,
	strings.ToLower(_VariantName[5:16]):  VariantApplication,
	_VariantName[16:23]:                  VariantLibrary,
	strings.ToLower(_VariantName[16:23]): VariantLibrary,
	_VariantName[23:33]:                  VariantSubstreams,
	strings.ToLower(_VariantName[23:33]): VariantSubstreams,
}

// ParseVariant attempts to convert a string to a Variant.
func ParseVariant(name string) (Variant, error) {
	if x, ok := _VariantValue[name]; ok {
		return x, nil
	}
	// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.
	if x, ok := _VariantValue[strings.ToLower(name)]; ok {
		return x, nil
	}
	return Variant(0), fmt.Errorf("%s is %w", name, ErrInvalidVariant)
}

// MarshalText implements the text marshaller method.
func (x Variant) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *Variant) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseVariant(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
